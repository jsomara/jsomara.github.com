<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[You have fallen into a pit trap]]></title>
  <link href="http://jsomara.github.com/atom.xml" rel="self"/>
  <link href="http://jsomara.github.com/"/>
  <updated>2013-02-04T15:39:14-05:00</updated>
  <id>http://jsomara.github.com/</id>
  <author>
    <name><![CDATA[Jordan OMara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using xz with ruby]]></title>
    <link href="http://jsomara.github.com/blog/2013/02/04/using-xz-with-ruby/"/>
    <updated>2013-02-04T15:28:00-05:00</updated>
    <id>http://jsomara.github.com/blog/2013/02/04/using-xz-with-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Xz">LZMA2 / xz</a> are the hottest new compression
algorithms on the block. When I found out <a href="http://katello.org">Katello</a> would
have to decrypt certain data payloads compressed with xz, I was excited to work
on it.</p>

<p>I found the excellent <a href="https://github.com/Quintus/ruby-xz">ruby-xz package</a> and
got to work. My little bit of code (not quite ready for a pull request yet,
otherwise I&#8217;d link it) would simply have to check a file on a remote server,
figure out if the file was newer than the last check, and if so decrypt it and
process it.</p>

<p>This gem makes it so simple! You need to require &#8216;open-uri&#8217; to open URLs as
file streams first.</p>

<p>The data I&#8217;m parsing is JSON, so I can&#8217;t load the data in chunks. Random chunks
of decompressed data would not be valid JSON.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'open-uri'
</span><span class='line'>require 'ruby-xz'
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>open(@url) do |f|
</span><span class='line'>  JSON.load(XZ.decompress_stream(f))
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Fast &amp; easy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hero Sheets - The Pathfinder character generator]]></title>
    <link href="http://jsomara.github.com/blog/2013/01/27/hero-sheets-pathfinder-character-sheets/"/>
    <updated>2013-01-27T19:22:00-05:00</updated>
    <id>http://jsomara.github.com/blog/2013/01/27/hero-sheets-pathfinder-character-sheets</id>
    <content type="html"><![CDATA[<p>I&#8217;ve started working on some software to improve management of <a href="http://www.herosheets.com">Pathfinder
character sheets</a>. I play Pathfinder weekly, and
while the game is quite nice, managing your character is an enormous pain in
the ass. I constantly have to erase and rewrite stuff, people forget to bring
their sheets and nobody knows how to level up. Surprisingly, nobody has really
solved this problem with software.  WOTC provides a pretty nice tool for
electronic character management for D&amp;D 4e, but it is surprisingly lacking in
mobile support.</p>

<p><img src="images/herosheets.png" alt="Hero Sheets logo" /></p>

<p>There isn&#8217;t even a section of the Pathfinder rulebook that explicitly states
how leveling up works. The rules can be inferred by understanding multiple
sections of the book, but surprisingly there is no flow chart or even simple
paragraph explanation. I hope to fix that! The first goal of Hero Sheets is to
make it simple to create and level up characters. A clear, wizard(hah!)-like
interface and the ability to print a nicely formatted PDF will be a great start
and should hopefully please players everywhere.</p>

<p>I plan on releasing the core rules module as an open source rubygem.
I&#8217;ve mostly been working on the sign up page + blog right now, to help generate
interest, but once the gem is a little more polished I&#8217;ll toss it up on github.
Even if Hero Sheets isn&#8217;t successful, maybe the community can make something
interesting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modular LDAP auth for Ruby]]></title>
    <link href="http://jsomara.github.com/blog/2012/07/10/modular-ldap-auth-for-ruby/"/>
    <updated>2012-07-10T11:08:00-04:00</updated>
    <id>http://jsomara.github.com/blog/2012/07/10/modular-ldap-auth-for-ruby</id>
    <content type="html"><![CDATA[<p>ldap fluff provides an easy way for your ruby apps to query regular LDAP,
FreeIPA and Active Directory systems for authentication and authorization.</p>

<p>It&#8217;s currently being used in the <a href="https://github.com/Katello/katello">Katello Project</a>
to provide the auth system with authentication and group membership info</p>

<p>You can easily add ldap fluff to your system, especially if you&#8217;re already using devise
or something similar, to add additional auth backend support. Here&#8217;s how to get started:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install ldap_fluff
</span></code></pre></td></tr></table></div></figure>


<p>You need /etc/ldap_fluff.yml to configure your LDAP connection. An example is provided in
the <a href="https://github.com/jsomara/ldap_fluff/blob/master/etc/ldap_fluff.yml">source repo</a></p>

<p>Here&#8217;s an example to connect to my FreeIPA server, named AMERICA</p>

<figure class='code'><figcaption><span>config example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span>  <span class="l-Scalar-Plain">america</span>
</span><span class='line'><span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">389</span>
</span><span class='line'><span class="l-Scalar-Plain">encryption</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">start_tls</span>
</span><span class='line'><span class="l-Scalar-Plain">base_dn</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dc=jomara,dc=redhat,dc=com</span>
</span><span class='line'><span class="l-Scalar-Plain">group_base</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dc=jomara,dc=redhat,dc=com</span>
</span><span class='line'><span class="l-Scalar-Plain">server_type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">free_ipa</span>
</span><span class='line'><span class="l-Scalar-Plain">service_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">admin</span>
</span><span class='line'><span class="l-Scalar-Plain">service_pass</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">reallylookingforwardtotheweekend</span>
</span></code></pre></td></tr></table></div></figure>


<p>The service_user doesn&#8217;t have to be admin (and probably shouldn&#8217;t be - but I&#8217;m
no LDAP admin), but just any user that has R/O access to user &amp; group data</p>

<p>Next, fire up irb or your rails console</p>

<figure class='code'><figcaption><span>irb fluff example </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;ldap_fluff&#39;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">ldap</span> <span class="o">=</span> <span class="no">LdapFluff</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;LdapFluff:0x7f7e9ca37358&gt;...</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">ldap</span><span class="o">.</span><span class="n">group_list</span><span class="p">(</span><span class="s1">&#39;rstantz&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;ipausers&quot;</span><span class="p">,</span> <span class="s2">&quot;ghostbusters&quot;</span><span class="p">,</span> <span class="s2">&quot;broskies&quot;</span><span class="p">,</span> <span class="s2">&quot;eighties&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">ldap</span><span class="o">.</span><span class="n">is_in_groups?</span><span class="p">(</span><span class="s1">&#39;rstantz&#39;</span><span class="p">,</span><span class="o">[</span><span class="s1">&#39;ghostbusters&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">ldap</span><span class="o">.</span><span class="n">is_in_groups?</span><span class="p">(</span><span class="s1">&#39;rstantz&#39;</span><span class="p">,</span><span class="o">[</span><span class="s1">&#39;transformers&#39;</span><span class="p">,</span><span class="s1">&#39;ghostbusters&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">007</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">ldap</span><span class="o">.</span><span class="n">is_in_groups?</span><span class="p">(</span><span class="s1">&#39;rstantz&#39;</span><span class="p">,</span><span class="o">[</span><span class="s1">&#39;transformers&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">00</span><span class="mi">9</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">ldap</span><span class="o">.</span><span class="n">authenticate?</span><span class="p">(</span><span class="s1">&#39;rstantz&#39;</span><span class="p">,</span><span class="s1">&#39;bustin&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">010</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">ldap</span><span class="o">.</span><span class="n">authenticate?</span><span class="p">(</span><span class="s1">&#39;rstantz&#39;</span><span class="p">,</span><span class="s1">&#39;ghostbustin&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the &#8220;is in groups?&#8221;  method is an AND operation. These methods should
provide all you need to support read only authorization and authentication
based on LDAP and LDAP groups.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cron with Rails on Openshift]]></title>
    <link href="http://jsomara.github.com/blog/2012/05/09/cron-with-rails-on-openshift/"/>
    <updated>2012-05-09T11:38:00-04:00</updated>
    <id>http://jsomara.github.com/blog/2012/05/09/cron-with-rails-on-openshift</id>
    <content type="html"><![CDATA[<p>Openshift has a cron cartridge that&#8217;s very easy to install and configure. You
simply install the cron cartridge:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rhc-ctl-app -a $appname -e add-cron-1.4</span></code></pre></td></tr></table></div></figure>


<p>And populate the directory tree in your app&#8217;s git repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openshift
</span><span class='line'>├── cron
</span><span class='line'>│   ├── daily
</span><span class='line'>│   │   └── my_script.rb
</span><span class='line'>│   ├── hourly
</span><span class='line'>│   ├── minutely
</span><span class='line'>│   ├── monthly
</span><span class='line'>│   ├── README.cron
</span><span class='line'>│   └── weekly
</span><span class='line'>│       ├── chrono.dat
</span><span class='line'>│       ├── chronograph
</span><span class='line'>│       ├── jobs.allow
</span><span class='line'>│       ├── jobs.deny
</span><span class='line'>│       └── README
</span></code></pre></td></tr></table></div></figure>


<p>The trick is that unlike Heroku, the Openshift cron system is basically just
like regular linux cron. They do not execute (by default) in your application&#8217;s
environment. Thankfully, it&#8217;s very easy to set up your scripts to run this way.</p>

<figure class='code'><figcaption><span>ruby cron example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># this script will default to DEVELOPMENT if you dont force it</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;./config/environment&quot;</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;OPENSHIFT_REPO_DIR&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="s1">&#39;daily cron job!&#39;</span>
</span><span class='line'><span class="no">MyHelper</span><span class="o">.</span><span class="n">do_something_daily</span><span class="p">(</span><span class="s1">&#39;internet&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should be pretty obvious where to put your script files based on when you want
them to run!</p>
]]></content>
  </entry>
  
</feed>
